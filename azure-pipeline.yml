trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azure_connection: 'azurerm-connection'
  workingDir: '$(System.DefaultWorkingDirectory)/terraform/dev'
  backend_resource_group_name: "devops2-group5-storage-rg"
  backend_storage_account_name: "devops2group5tfstate"
  backend_container_name: "devops2-group5-tfstate-container"
  backend_rg_location: "japanwest"
  backend_key: "terraform.tfstate"

stages:
- stage: Create_Terraform_Backend
  displayName: 'Create Terraform Backend Storage'
  jobs:
  - job: CreateStorage
    displayName: 'Create Azure Storage for Terraform State'
    steps:
    - task: AzureCLI@2
      displayName: 'Create Resource Group'
      inputs:
        azureSubscription: '$(azure_connection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az group create \
            --name $(backend_resource_group_name) \
            --location $(backend_rg_location) \
            --tags "managedBy=azure-pipeline"

    - task: AzureCLI@2
      displayName: 'Check if Storage Account Exists'
      name: checkStorageAccount
      inputs:
        azureSubscription: '$(azure_connection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          if az storage account check-name --name $(backend_storage_account_name) --query "nameAvailable" -o tsv | grep "false"
          then
            echo "##vso[task.setvariable variable=storageAccountExists;isOutput=true]true"
          else
            echo "##vso[task.setvariable variable=storageAccountExists;isOutput=true]false"
          fi

    - task: AzureCLI@2
      displayName: 'Create Storage Account'
      condition: eq(variables['checkStorageAccount.storageAccountExists'], 'false') # Only run if storage account does not exist
      inputs:
        azureSubscription: '$(azure_connection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az storage account create \
            --name $(backend_storage_account_name) \
            --resource-group $(backend_resource_group_name) \
            --location $(backend_rg_location) \
            --sku Standard_LRS \
            --encryption-services blob \
            --kind StorageV2 \
            --access-tier Hot

    - task: AzureCLI@2
      displayName: 'Create Storage Container'
      inputs:
        azureSubscription: '$(azure_connection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az storage container create \
            --name $(backend_container_name) \
            --account-name $(backend_storage_account_name) \
            --resource-group $(backend_resource_group_name)

- stage: Terraform_init_plan
  displayName: 'Terraform init & Plan'
  jobs:
  - job: TerraformPlan
    displayName: 'Terraform init & Plan'
    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm' # Or your chosen provider
        command: 'init'
        workingDirectory: '$(workingDir)' # Path to your tf files
        backendType: 'azurerm'
        backendServiceArm: '$(azure_connection)' 
        backendAzureRmStorageAccountName: '$(backend_storage_account_name)' 
        backendAzureRmResourceGroupName: $(backend_resource_group_name) 
        backendAzureRmContainerName: '$(backend_container_name)'
        backendAzureRmKey: '$(backend_key)'

    - task: TerraformTaskV4@4
      displayName: 'Validate Terraform'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        environmentServiceNameAzureRM: '$(azure_connection)' 


    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm' # Or your chosen provider
        command: 'plan'
        commandOptions: '-out tfplan'
        workingDirectory: '$(workingDir)' # Path to your tf files
        backendType: 'azurerm'
        backendServiceArm: '$(azure_connection)' 
        backendAzureRmStorageAccountName: '$(backend_storage_account_name)' 
        backendAzureRmResourceGroupName: $(backend_resource_group_name) 
        backendAzureRmContainerName: '$(backend_container_name)'
        backendAzureRmKey: '$(backend_key)'
        environmentServiceNameAzureRM: '$(azure_connection)' 
    - task: CopyFiles@2
      displayName: 'Moving Terraform Code to artifact staging'
      inputs:
        Contents: 'terraform/**'
        TargetFolder: '$(build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Making artifact available to apply stage'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'tfplan'
        publishLocation: 'Container'