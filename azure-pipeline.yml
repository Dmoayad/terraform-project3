# Terraform Azure DevOps Pipeline 

trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azure_connection: 'azurerm-connection'
  workingDir: '$(System.DefaultWorkingDirectory)/terraform/dev'
  backend_resource_group_name: "devops2-group5-storage-rg"
  backend_storage_account_name: "devops2group5tfstate"
  backend_container_name: "devops2-group5-tfstate-container"
  backend_rg_location: "japanwest"
  backend_key: "terraform.tfstate"
  artifact_name: "plan"

stages:

# -----------------------------------------
# Stage 1: Create Terraform Storage Backend
# -----------------------------------------

- stage: Create_Terraform_Backend
  displayName: 'Create Terraform Backend Storage'
  jobs:
  - job: CreateStorage
    displayName: 'Create Azure Storage for Terraform State'
    steps:
    - task: AzureCLI@2
      displayName: 'Create Resource Group'
      inputs:
        azureSubscription: '$(azure_connection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az group create \
            --name $(backend_resource_group_name) \
            --location $(backend_rg_location) \
            --tags "managedBy=azure-pipeline"

    - task: AzureCLI@2
      displayName: 'Check if Storage Account Exists'
      name: checkStorageAccount
      inputs:
        azureSubscription: '$(azure_connection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          if az storage account check-name --name $(backend_storage_account_name) --query "nameAvailable" -o tsv | grep "false"
          then
            echo "##vso[task.setvariable variable=storageAccountExists;isOutput=true]true"
          else
            echo "##vso[task.setvariable variable=storageAccountExists;isOutput=true]false"
          fi

    - task: AzureCLI@2
      displayName: 'Create Storage Account'
      condition: eq(variables['checkStorageAccount.storageAccountExists'], 'false') # Only run if storage account does not exist
      inputs:
        azureSubscription: '$(azure_connection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az storage account create \
            --name $(backend_storage_account_name) \
            --resource-group $(backend_resource_group_name) \
            --location $(backend_rg_location) \
            --sku Standard_LRS \
            --encryption-services blob \
            --kind StorageV2 \
            --access-tier Hot

            echo "Polling for storage account provisioning state..."
          provisioning_state=""
          # Poll for up to 5 minutes (60 iterations of 5 seconds)
          timeout_seconds=300
          interval_seconds=5
          elapsed_seconds=0

          while [[ "$provisioning_state" != "Succeeded" && "$elapsed_seconds" -lt "$timeout_seconds" ]]; do
            provisioning_state=$(az storage account show \
              --name $(backend_storage_account_name) \
              --resource-group $(backend_resource_group_name) \
              --query provisioningState -o tsv 2>/dev/null) # Redirect stderr to /dev/null to suppress errors during initial provisioning

            if [[ "$provisioning_state" != "Succeeded" ]]; then
              echo "Current state: $provisioning_state. Waiting ${interval_seconds} seconds..."
              sleep ${interval_seconds}
              elapsed_seconds=$((elapsed_seconds + interval_seconds))
            fi
          done

          if [[ "$provisioning_state" == "Succeeded" ]]; then
            echo "Storage account $(backend_storage_account_name) provisioned successfully."
          else
            echo "Error: Storage account $(backend_storage_account_name) did not reach 'Succeeded' state within the timeout."
            exit 1 # Exit the script with an error code
          fi


    - task: AzureCLI@2
      displayName: 'Create Storage Container'
      inputs:
        azureSubscription: '$(azure_connection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az storage container create \
            --name $(backend_container_name) \
            --account-name $(backend_storage_account_name) \
            --resource-group $(backend_resource_group_name)

# -----------------------------------------
# Stage 2: Terraform Init & Plan 
# This stage will create a Terraform plan and store it in the Azure Storage Account.
# -----------------------------------------
- stage: terraform_plan
  displayName: 'Terraform Plan'
  jobs:
  - job: TerraformPlan
    displayName: 'Terraform init & Plan'
    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm' # Or your chosen provider
        command: 'init'
        workingDirectory: '$(workingDir)' # Path to your tf files
        backendType: 'azurerm'
        backendServiceArm: '$(azure_connection)' 
        backendAzureRmStorageAccountName: '$(backend_storage_account_name)' 
        backendAzureRmResourceGroupName: $(backend_resource_group_name) 
        backendAzureRmContainerName: '$(backend_container_name)'
        backendAzureRmKey: '$(backend_key)'

    - task: TerraformTaskV4@4
      displayName: 'Validate Terraform'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        environmentServiceNameAzureRM: '$(azure_connection)' 


    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm' # Or your chosen provider
        command: 'plan'
        commandOptions: '-out tfplan'
        workingDirectory: '$(workingDir)' # Path to your tf files
        backendType: 'azurerm'
        backendServiceArm: '$(azure_connection)' 
        backendAzureRmStorageAccountName: '$(backend_storage_account_name)' 
        backendAzureRmResourceGroupName: $(backend_resource_group_name) 
        backendAzureRmContainerName: '$(backend_container_name)'
        backendAzureRmKey: '$(backend_key)'
        environmentServiceNameAzureRM: '$(azure_connection)' 
    - task: CopyFiles@2
      displayName: 'Moving Terraform Code to artifact staging'
      inputs:
        Contents: 'terraform/**'
        TargetFolder: '$(build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Making artifact available to apply stage'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: '$(artifact_name)'
        publishLocation: 'Container'

# -----------------------------------------
# Stage 3: Terraform apply
# This stage will apply the Terraform plan created in the previous stage.
# -----------------------------------------

- stage: Terraform_apply
  displayName: 'Terraform Apply'
  dependsOn: terraform_plan # Ensure this stage runs after init and plan
  jobs:
  - job: TerraformApply
    displayName: 'Apply Terraform Plan'
    steps:
    - task: DownloadBuildArtifacts@1
      displayName: 'Download Terraform Artifact'
      inputs:
        buildType: 'current'
        # The default artifact name is 'drop'. Make sure this matches
        # the ArtifactName in your PublishBuildArtifacts@1 task if not using the variable.
        # If you are using the variable, this will automatically match.
        artifactName: '$(artifact_name)'
        downloadType: 'single'
        downloadPath: '$(System.DefaultWorkingDirectory)'

    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Init (for apply)'
      inputs:
        provider: 'azurerm' # Or your chosen provider
        command: 'init'
        workingDirectory: '$(workingDir)' # Path to your tf files
        backendType: 'azurerm'
        backendServiceArm: '$(azure_connection)'
        backendAzureRmStorageAccountName: '$(backend_storage_account_name)'
        backendAzureRmResourceGroupName: $(backend_resource_group_name)
        backendAzureRmContainerName: '$(backend_container_name)'
        backendAzureRmKey: '$(backend_key)'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm' # Or your chosen provider
        command: 'apply'
        commandOptions: '$(System.DefaultWorkingDirectory)/$(artifact_name)/terraform/dev/tfplan' # Provide the path to the downloaded plan file
        workingDirectory: '$(workingDir)' # Path to your tf files
        backendType: 'azurerm'
        backendServiceArm: '$(azure_connection)'
        backendAzureRmStorageAccountName: '$(backend_storage_account_name)'
        backendAzureRmResourceGroupName: $(backend_resource_group_name)
        backendAzureRmContainerName: '$(backend_container_name)'
        backendAzureRmKey: '$(backend_key)'
        environmentServiceNameAzureRM: '$(azure_connection)'
      # retryCount: 3

# -----------------------------------------
# Stage 4: Helm Setup Tools
# This stage will install NGINX Ingress Controller, Prometheus, and Grafana using Helm.
# -----------------------------------------

- stage: Install_Tools
  displayName: "Install Ingress, Prometheus, and Grafana"
  dependsOn: Terraform_apply
  jobs:
  - job: SetupTools
    displayName: "Install Helm Tools"
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self

    - task: AzureCLI@2
      displayName: 'Install Ingress + Prometheus + Grafana'
      inputs:
        azureSubscription: '$(azure_connection)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Get AKS credentials"
          az aks get-credentials --resource-group devops2-group5-rg --name devops2-group5-aks

          echo "Install NGINX Ingress Controller"
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install nginx ingress-nginx/ingress-nginx

          echo "Install Prometheus + Grafana"
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install monitoring prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace \
          --values prometheus-grafana/monitoring-values.yaml
